package com.china.bosh.mylibrary.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.china.bosh.mylibrary.db.table.PriceEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRICE_ENTITY".
*/
public class PriceEntityDao extends AbstractDao<PriceEntity, Long> {

    public static final String TABLENAME = "PRICE_ENTITY";

    /**
     * Properties of entity PriceEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ItemType = new Property(1, String.class, "itemType", false, "ITEM_TYPE");
        public final static Property ItemTypeName = new Property(2, String.class, "itemTypeName", false, "ITEM_TYPE_NAME");
        public final static Property ItemCode = new Property(3, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property ItemName = new Property(4, String.class, "itemName", false, "ITEM_NAME");
        public final static Property UnitPrice = new Property(5, double.class, "unitPrice", false, "UNIT_PRICE");
        public final static Property Unit = new Property(6, String.class, "unit", false, "UNIT");
        public final static Property UnitName = new Property(7, String.class, "unitName", false, "UNIT_NAME");
        public final static Property Quantity = new Property(8, double.class, "quantity", false, "QUANTITY");
        public final static Property Amount = new Property(9, double.class, "amount", false, "AMOUNT");
    }


    public PriceEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PriceEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRICE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ITEM_TYPE\" TEXT," + // 1: itemType
                "\"ITEM_TYPE_NAME\" TEXT," + // 2: itemTypeName
                "\"ITEM_CODE\" TEXT UNIQUE ," + // 3: itemCode
                "\"ITEM_NAME\" TEXT," + // 4: itemName
                "\"UNIT_PRICE\" REAL NOT NULL ," + // 5: unitPrice
                "\"UNIT\" TEXT," + // 6: unit
                "\"UNIT_NAME\" TEXT," + // 7: unitName
                "\"QUANTITY\" REAL NOT NULL ," + // 8: quantity
                "\"AMOUNT\" REAL NOT NULL );"); // 9: amount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRICE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PriceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String itemType = entity.getItemType();
        if (itemType != null) {
            stmt.bindString(2, itemType);
        }
 
        String itemTypeName = entity.getItemTypeName();
        if (itemTypeName != null) {
            stmt.bindString(3, itemTypeName);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(4, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(5, itemName);
        }
        stmt.bindDouble(6, entity.getUnitPrice());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(7, unit);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(8, unitName);
        }
        stmt.bindDouble(9, entity.getQuantity());
        stmt.bindDouble(10, entity.getAmount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PriceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String itemType = entity.getItemType();
        if (itemType != null) {
            stmt.bindString(2, itemType);
        }
 
        String itemTypeName = entity.getItemTypeName();
        if (itemTypeName != null) {
            stmt.bindString(3, itemTypeName);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(4, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(5, itemName);
        }
        stmt.bindDouble(6, entity.getUnitPrice());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(7, unit);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(8, unitName);
        }
        stmt.bindDouble(9, entity.getQuantity());
        stmt.bindDouble(10, entity.getAmount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PriceEntity readEntity(Cursor cursor, int offset) {
        PriceEntity entity = new PriceEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itemType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemTypeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itemCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // itemName
            cursor.getDouble(offset + 5), // unitPrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // unit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // unitName
            cursor.getDouble(offset + 8), // quantity
            cursor.getDouble(offset + 9) // amount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PriceEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItemName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnitPrice(cursor.getDouble(offset + 5));
        entity.setUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUnitName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQuantity(cursor.getDouble(offset + 8));
        entity.setAmount(cursor.getDouble(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PriceEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PriceEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PriceEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
